Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.

You must write an algorithm that runs in O(n) time and uses only constant extra space.

 

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [2,3]
Example 2:

Input: nums = [1,1,2]
Output: [1]
Example 3:

Input: nums = [1]
Output: []

approach 1)
Hashset 
t.c o(n)
s.c o(n)

approach 2)
The idea is to modify the array in-place as you walk through it, while also preserving the original array elements.

We know that all elements are positive initially. When we see k = | A[i] | for the first time, multiply A[k] by -1. The negative sign on index k indicates k has been seen once. As you progress through the array, you will find some j > i such that A[j] = k. Now when you look at A[k], it is already negative (seen once). Thus j is a duplicate.
t.c o(n)
s.c o(1)
public List<Integer> findDuplicates(int[] nums) {
        final List<Integer> duplicates = new ArrayList<Integer>();
        for(int i = 0; i < nums.length; i++) {
            final int n = Math.abs(nums[i]);
            if(nums[n - 1] < 0) {
                duplicates.add(n);
            } else {
                nums[n - 1] *= -1;
            }
        }
        return duplicates;
    }
    
