Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.

You must write an algorithm that runs in O(n) time and uses only constant extra space.

 

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [2,3]
Example 2:

Input: nums = [1,1,2]
Output: [1]
Example 3:

Input: nums = [1]
Output: []

approach 1)
Hashset 
t.c o(n)
s.c o(n)

approach 2)
If we use HashSet it will be pretty easy solution. We iterate over the array and put elements one by one in our HashSet, if element already there, it means that we already have seen this element and we put it in our outpur list

But the problem is asking us to not use extra memory other than for the output list. Given the constrainsts (i.e all elements in the range [1, n]) of this problem, we can use nums as a HashSet. We just mark each element nums[nums[i] - 1] with negative sign, i.e turning it into a negative number. What we are doing is essentially mapping nums[i] value to a nums[i] - 1 index. -1 is to account for the fact that array is zero-based. We won't we overflowing our array nums as we are guaranteed the elements will be in [1,n] range.

Important thing to keep in mind, whenever we read a value from nums we should always take it's absolute value, as that value might have been marked negative by previous iterations.

You can also think about this technique as a boolean array, where + of each element means Not seen or False, and - means Seen or True

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> res = new ArrayList<>();
        
        for (int i = 0; i < nums.length; i++) {
            
            int idx = Math.abs(nums[i]) - 1; // Get the mapped index for nums[i], using Math.abs only once
            
            if (nums[idx] < 0) // Check if nums[i] has been seen before, if true then add to the output list
                res.add(idx + 1); // Need to add +1 as our range is 1-based
            
            nums[idx] *= -1; // Unconditionally flip the sign, if it's positive, we want to mark it as negative. But if it's negative, we just recover previous value so that at the end our array is not modified
        }
        
        return res;
    }
}
