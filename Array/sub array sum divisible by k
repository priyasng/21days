Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
Example 2:

Input: nums = [5], k = 9
Output: 0


Hashmap Approach

While iterating through the array if we can store the prefixSum at each index in a HashMap and at the same time 
check if a prefixSum exists for the current runningSum%k. we'll use use a HashMap to compute and
store the prefix sums as Keys and the corresponding frequencies as Values.

public class Solution {
    public int subarraySum(int[] nums, int k) {
 
    Map<Integer,Integer> p = new HashMap();
        
     p.put(0,1);   
int ans=0,sum=0;
        
     for(int i=0;i<nums.length;i++){
         sum+=nums[i];
        if(p.containsKey(sum-k)){
            ans+=p.get(sum-k);
        } 
         p.put(sum,p.getOrDefault(sum,0)+1);
     }   
       return ans; 
        
    }
}
