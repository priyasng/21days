You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1



we have two pointers lo and hi that start from two ends. Each time we update the one with smaller height.
Two Pointers
Why?

It is kind of pruning unnecessary cases. If height[lo] < height[hi], 
we move lo because we know that the areas in which lo is the left bar ([lo, lo + 1],[lo, lo + 2], ..., [lo, hi - 1]) must be less than the area in [lo, hi]
that we just considered. So next time we should not consider lo as the left end anymore.


public int maxArea(int[] height) {
  // assume n >= 2
  int n = height.length;
  int lo = 0, hi = n - 1;
  int max = Integer.MIN_VALUE;
  while (lo < hi) {
    int water = (hi - lo) * Math.min(height[lo], height[hi]);
    max = Math.max(max, water);
    if (height[lo] < height[hi]) ++lo;
    else --hi;
  }
  return max;
}

Time: O(N)
Space: O(1)
