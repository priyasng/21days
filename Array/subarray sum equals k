Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

 Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2





Step 1. The "nums" array is traversed to calculate all the elements of the sum array

Step 2. Use the nested loop to judge.

key : Can we judge when the array is traversed(Step 1) ?

Transposition

int[] sum = new int[nums.length + 1];

sum[0] = 0;
for (int end = 1; end < (nums.length + 1); end++)
  sum[end] = sum[end - 1] + nums[end - 1];
Put each element of "sum" array into hashmap according to this format : (sumi, number of occurence)

When constructing the "sum" array, we take the currently constructed element as sum[end], then all the elements before "end" which have been calculated can be regarded as all sum[start] for this "end".

Transform the judgment condition

Obviously, when sum[end] is calculated, all its possible sum[start] are already in the map.

sum[end] - sum[start] == k

sum[end] - k == sum[start]
When sumend is calculated, we only need to determine whether there is key == sumend  - k in the hashmap and add the number of occurence to the answer.

Attention : In the previous method, we set the first element of sum to 0. Similarly, we put it in the hashmap, which is (0, 1).

Code
public class Solution {
    public int subarraySum(int[] nums, int k) {
        int count = 0, sum = 0;
        HashMap < Integer, Integer > map = new HashMap < > ();
        map.put(0, 1);
      
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (map.containsKey(sum - k))
                count += map.get(sum - k);
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;
    }
}
Complexity Anaysis
Time complexity : O(n).
Space complexity : O(n).
