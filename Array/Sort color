Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]

 Approach 1)
 *Sort the array
 *T.C O(NLOGN)
 S.C O(1)
 
 
 
 optimised approach 2)
 *counting sort
 *count no. of 0,1,2
 T.C o(n)+O(n)
 S.C o(n)
 
 class Solution {
    public void sortColors(int[] nums) {
        int count0=0, count1=0, count2=0;
        for(int i=0; i<nums.length; i++){
            if(nums[i]==0){count0++;}
            else if(nums[i]==1){count1++;}
            else if(nums[i]==2){count2++;}
        }
        for(int i=0; i<nums.length; i++){
            if(i<count0){nums[i]=0;}
            else if(i<count0+count1){nums[i]=1;}
            else {nums[i]=2;}
        }
    }
}

 
 optimised approach 3)
 Dutch National Flag Algorithm
 *three pointer approach
 low ,mid ,high
 *All the element left of low is zero
 *All the element right of high is 2
 *moving mid pointer till crosses high pointer
 while moving it three checks-when mid pointer is pointing to 0
                              when mid pointer is pointing to 1
                              when mid pointer is pointing to 2
  *when mid pointer points to 0, we swap the value with low pointer
  move mid pointer by one and low pointer by one.
  *when mid pointer points to 2, we swap the value with high pointer
   move mid pointer by one and high pointer by one.
   
   T.C O(N) 
   S.C O(N)
   
   
   
   class Solution {
    public void sortColors(int[] nums) 
    {
        int low=0;
        int high=nums.length-1;
        int mid=0;
        while(mid<=high)
        {
            switch(nums[mid])
            {
                case 0:
                    {
                        int temp=nums[low];
                        nums[low]=nums[mid];
                        nums[mid]=temp;
                        low++;
                        mid++;
                        break;
                    }
                case 1:
                    {
                        mid++;
                        break;
                    }
                case 2:
                    {
                        int temp=nums[mid];
                        nums[mid]=nums[high];
                        nums[high]=temp;
                        high--;
                        break;
                    }
            }
        }
        
    }
}
 
